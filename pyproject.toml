[build-system]
requires = [
    "hatchling>=1.13.0",
    "hatch-vcs>=0.3.0",
]
build-backend = "hatchling.build"

[project]
name = "recast_atlas"
dynamic = ["version"]
description = "RECAST for ATLAS at the LHC"
readme = "README.md"
license = { text = "Apache-2.0" }  # SPDX short identifier
requires-python = ">=3.8"
authors = [
    { name = "Lukas Heinrich", email = "lukas.heinrich@cern.ch" },
    { name = "Matthew Feickert", email = "matthew.feickert@cern.ch" },
]
maintainers = [ { name = "Matthew Feickert", email = "matthew.feickert@cern.ch" } ]
keywords = [
    "physics",
    "RECAST",
    "ATLAS",
    "reinterpretation",
    "analysis reuse",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
]

# TODO: Empirically evaluate lower bounds
dependencies = [
    "click>=7.0",  # for console scripts
    "jsonschema>=3.0.0",
    "pyyaml>=5.1",  # for parsing CLI options
    "yadage-schemas>=0.10.7",  # c.f. https://github.com/yadage/yadage-schemas/issues/35
    "importlib-resources>=5.10; python_version < '3.9'",  # for accessing package filepaths
]

[project.scripts]
recast = "recastatlas.cli:recastatlas"

[project.urls]
Documentation = "https://github.com/recast-hep/recast-atlas"
Homepage = "https://github.com/recast-hep/recast-atlas"
"Issue Tracker" = "https://github.com/recast-hep/recast-atlas/issues"
"Releases" = "https://github.com/recast-hep/recast-atlas/releases"
"Source Code" = "https://github.com/recast-hep/recast-atlas"

[project.optional-dependencies]
local = [
    "yadage>=0.21.0",  # yadage[viz] breaks so install following manually
    "adage",  # compatible versions controlled through yadage
    "packtivity",  # compatible versions controlled through yadage
    "pydotplus==2.0.2",
    "pydot",  # from yadage[viz] extra
    "pygraphviz"  # from yadage[viz] extra
]
kubernetes = ["kubernetes==9.0.0"]
reana = ["reana-client>=0.8.0"]
all = ["recast-atlas[local,kubernetes,reana]"]

# Developer extras
develop = [
    "pytest>=7.0.0",
    "ruff",
    "pre-commit",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.hatch.build.hooks.vcs]
version-file = "src/recastatlas/_version.py"

[tool.hatch.build.targets.sdist]
# hatchling always includes:
# pyproject.toml, .gitignore, any README, any LICENSE, AUTHORS
only-include = [
    "/src",
    "/tests",
    "/CITATION.cff"
]

[tool.hatch.build.targets.wheel]
packages = ["src/recastatlas"]

[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
#  "B",        # flake8-bugbear
  "I",        # isort
#  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
#  "PT",       # flake8-pytest-style
#  "PTH",      # flake8-use-pathlib
#  "RET",      # flake8-return
  "RUF",      # Ruff-specific
#  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "FURB",     # refurb
  "PYI",      # flake8-pyi
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  # FIXME: Ingores are to cover over failing checks at Ruff adoption point
  "C414",
  "EM101",
  "EM103",
  "G004",
  "PLW2901",
  "T201",
]
typing-modules = ["mypackage._compat.typing"]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
